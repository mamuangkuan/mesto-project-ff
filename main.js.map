{"version":3,"file":"main.js","mappings":"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","sources":["webpack://yandex-praktikum/./src/components/api.js","webpack://yandex-praktikum/./src/components/card.js","webpack://yandex-praktikum/./src/components/validation.js","webpack://yandex-praktikum/./src/components/modal.js","webpack://yandex-praktikum/./src/index.js"],"sourcesContent":["//Конфиг для подключения и авторизации на сервере\nconst config = {\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-18\",\n  headers: {\n    authorization: \"9fe7d77e-0e55-443e-a94d-5fc31f24e03d\",\n    \"Content-Type\": \"application/json\",\n  },\n};\n//Преобразование промиса в JSON-массив\nconst handleResponse = (res) => {\n  if (res.ok) {\n    return res.json();\n  }\n  // если ошибка, отклоняем промис\n  return Promise.reject(`Ошибка: ${res.status}`);\n};\n\n//Получение списка карточек с сервера\nexport const getInitialCards = () => {\n  return fetch(`${config.baseUrl}/cards`, {\n    method: \"GET\",\n    headers: config.headers,\n  }).then(handleResponse);\n};\n\n//Получение данных профиля с сервера\nexport const getProfileData = () => {\n  return fetch(`${config.baseUrl}/users/me`, {\n    method: \"GET\",\n    headers: config.headers,\n  }).then(handleResponse);\n};\n\n//Обновление данных профиля на сервере\nexport const updateProfile = (newProfileData) => {\n  return fetch(`${config.baseUrl}/users/me`, {\n    method: \"PATCH\",\n    headers: config.headers,\n    body: JSON.stringify(newProfileData),\n  })\n    .then(handleResponse) \n};\n\n//Обновление картинки аватарки на сервере\nexport const updateAvatar = (newAvatarImg) => {\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\n    method: \"PATCH\",\n    headers: config.headers,\n    body: JSON.stringify(newAvatarImg),\n  }).then(handleResponse);\n};\n\n//Добавление новой карточки на сервер\nexport const addNewPlaceToServer = (newCard) => {\n  return fetch(`${config.baseUrl}/cards`, {\n    method: \"POST\",\n    headers: config.headers,\n    body: JSON.stringify(newCard),\n  }).then(handleResponse);\n};\n\n//Удаление карточки с сервера\nexport const deleteCardFromServer = (itemId) => {\n  return fetch(`${config.baseUrl}/cards/${itemId}`, {\n    method: \"DELETE\",\n    headers: config.headers,\n  }).then(handleResponse);\n};\n\n//Устанока лайка\nexport const putLike = (itemId) => {\n  return fetch(`${config.baseUrl}/cards/likes/${itemId}`, {\n    method: \"PUT\",\n    headers: config.headers,\n  }).then(handleResponse);\n};\n\n//Снятие лайка\nexport const removeLike = (itemId) => {\n  return fetch(`${config.baseUrl}/cards/likes/${itemId}`, {\n    method: \"DELETE\",\n    headers: config.headers,\n  }).then(handleResponse);\n};\n","import { deleteCardFromServer, putLike, removeLike } from \"./api.js\";\n\n//Темплейт карточки\nconst cardTemplate = document.querySelector(\"#card-template\").content;\n\n// Функция создания карточки\nexport function createNewCard(\n  item,\n  removeCard,\n  openBigImgModal,\n  likeCard,\n  profileData,\n  deleteCardFromServer\n) {\n  //Клонирование экземпляра карточки\n  const cardItem = cardTemplate.querySelector(\".places__item\").cloneNode(true);\n  //Кнопка удаления карточки\n  const removeButton = cardItem.querySelector(\".card__delete-button\");\n  //Кнопка лайка\n  const likeButton = cardItem.querySelector(\".card__like-button\");\n  //Блок с картинкой\n  const cardImageUrl = cardItem.querySelector(\".card__image\");\n  //Заголовок картинки\n  const cardTitle = cardItem.querySelector(\".card__title\");\n  //Заполняем переменные данными\n  cardImageUrl.src = item.link;\n  cardTitle.alt = item.name;\n  cardTitle.textContent = item.name;\n  //Обработчик открытия большой картинки\n  cardImageUrl.addEventListener(\"click\", function () {\n    openBigImgModal(item);\n  });\n  //Обработчик кнопки удаления карточки\n  removeButton.addEventListener(\"click\", function (evt) {\n    //Удаляем карточку из DOM-дерева\n    removeCard(evt);\n    //Удаяем карточку с сервера\n    deleteCardFromServer(item._id);\n  });\n  //Обработчик кнопки лайка\n  likeButton.addEventListener(\"click\", function (evt) {\n    likeCard(evt, item, cardItem);\n  });\n  //Счетчик лайков\n  cardItem.querySelector(\".like__counter\").textContent = item.likes.length;\n  //Выделяем лайкнутые карточки\n  if (item.likes.some((like) => like._id === profileData._id)) {\n    likeButton.classList.toggle(\"card__like-button_is-active\");\n  }\n  //Скрытие корзины для чужих карточек\n  if (!(profileData._id === item.owner._id)) {\n    removeButton.style = [\"display:none\"];\n  }\n  //Возврат готового результата\n  return cardItem;\n}\n\n//Функция удаления карточки\nexport function removeCard(evt) {\n  evt.target.closest(\".places__item\").remove();\n}\n\n//Функция лайка карточки\nexport function likeCard(evt, item, cardItem) {\n  if (evt.target.classList.contains(\"card__like-button_is-active\")) {\n    removeLike(item._id).then((res) => {\n      evt.target.classList.remove(\"card__like-button_is-active\");\n      cardItem.querySelector(\".like__counter\").textContent = res.likes.length;\n    });\n  } else {\n    putLike(item._id).then((res) => {\n      evt.target.classList.add(\"card__like-button_is-active\");\n      cardItem.querySelector(\".like__counter\").textContent = res.likes.length;\n    });\n  }\n}\n","//Конфиг валидации\nexport const validationConfig = {\n  formSelector: \".popup__form\",\n  inputSelector: \".popup__input\",\n  submitButtonSelector: \".popup__button\",\n  inactiveButtonClass: \"popup__button_disabled\",\n  inputErrorClass: \"popup__input_type_error\",\n  errorClass: \"popup__error_visible\",\n};\n\n//Функция, которая добавляет класс с ошибкой\nconst showInputError = (formProfile, inputElement, errorMessage) => {\n  const errorElement = formProfile.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.add(validationConfig.errorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(validationConfig.inputErrorClass);\n};\n\n//Проверка валидности поля\nconst isValid = (formProfile, inputElement) => {\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    inputElement.setCustomValidity(\"\");\n  }\n  if (!inputElement.validity.valid) {\n    showInputError(formProfile, inputElement, inputElement.validationMessage);\n  } else {\n    hideInputError(formProfile, inputElement);\n  }\n};\n\n//Назначение листнера всем полям\nconst setEventListeners = (formProfile) => {\n  const inputList = Array.from(\n    formProfile.querySelectorAll(validationConfig.inputSelector)\n  );\n  const buttonElement = formProfile.querySelector(\n    validationConfig.submitButtonSelector\n  );\n  toggleButtonState(inputList, buttonElement);\n  inputList.forEach((inputElement) => {\n    inputElement.addEventListener(\"input\", () => {\n      isValid(formProfile, inputElement);\n      toggleButtonState(inputList, buttonElement);\n    });\n  });\n};\n\n//Провка наличия невалидного поля\nconst hasInvalidInput = (inputList) => {\n  return inputList.some((inputElement) => {\n    return !inputElement.validity.valid;\n  });\n};\n\n//Функция проверяет статус кнопки - активаня или неактивная, если есть хоть 1 невалидные инпут\nconst toggleButtonState = (inputList, buttonElement) => {\n  if (hasInvalidInput(inputList)) {\n    buttonElement.disabled = true;\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\n  } else {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\n  }\n};\n\n// Функция валидации полей\nexport const enableValidation = () => {\n  const formList = Array.from(\n    document.querySelectorAll(validationConfig.formSelector)\n  );\n  formList.forEach((formProfile) => {\n    setEventListeners(formProfile);\n  });\n};\n\n// Удаление класса с ошибкой\nconst hideInputError = (formProfile, inputElement) => {\n  const errorElement = formProfile.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.remove(validationConfig.errorClass);\n  errorElement.classList.remove(validationConfig.inputErrorClass);\n  errorElement.textContent = \"\";\n};\n\n// Функция удаляет все ошибки валидации и делает кнопку неактивной без валидных данных\nexport const clearValidation = (formProfile, validationConfig) => {\n  const formsInput = Array.from(\n    formProfile.querySelectorAll(validationConfig.inputSelector)\n  );\n  formsInput.forEach((input) => {\n    hideInputError(formProfile, input, validationConfig);\n  });\n  const submitButton = formProfile.querySelector(\n    validationConfig.submitButtonSelector\n  );\n  submitButton.disabled = true;\n  submitButton.classList.add(validationConfig.inactiveButtonClass);\n};\n","// Функция открытия модального окна\nexport function openModal(item) {\n  item.classList.add(\"popup_is-opened\");\n  document.addEventListener(\"keydown\", closePopupByEsc);\n}\n\n// Функция закрытия модального окна\nexport function closeModal(item) {\n  item.classList.remove(\"popup_is-opened\");\n  document.removeEventListener(\"keydown\", closePopupByEsc);\n}\n\n// Функция закрытия модальных окон нажатием клавиши ESC\nfunction closePopupByEsc(evt) {\n  if (evt.key === \"Escape\") {\n    closeModal(document.querySelector(\".popup_is-opened\"));\n  }\n}\n\n// Функция закрытия модальных окон кликом по оверлею\nexport function closePopupByOverlay(evt) {\n  if (evt.target === evt.currentTarget) {\n    closeModal(evt.currentTarget);\n  }\n}","// Подключение файла стилей\nimport \"./pages/index.css\";\n// Подключений функций создания, удаления и лайка карточки\nimport { createNewCard, removeCard, likeCard } from \"./components/card.js\";\n//Подключаем апи\nimport {\n  getInitialCards,\n  getProfileData,\n  updateProfile,\n  updateAvatar,\n  addNewPlaceToServer,\n  deleteCardFromServer,\n} from \"./components/api.js\";\n// Подключений функций создания, удаления и лайка карточки\nimport {\n  enableValidation,\n  validationConfig,\n  clearValidation,\n} from \"./components/validation.js\";\n// Подключений функций открытия и закрытия попапов\nimport {\n  openModal,\n  closeModal,\n  closePopupByOverlay,\n} from \"./components/modal.js\";\n\n//СПИСОК ПЕРЕМЕННЫХ И КОНСТАНТ\n//Список карточек\nconst listOfCards = document.querySelector(\".places__list\");\n//Модальное окно добавления нового места\nconst modalAddNewPlace = document.querySelector(\".popup_type_new-card\");\n//Кнопка добавления нового места\nconst modalAddNewPlaceButton = document.querySelector(\".profile__add-button\");\n//Модальное окно редактирования профиля\nconst modalProfile = document.querySelector(\".popup_type_edit\");\n//Кнопка редактирования профиля\nconst profileEditButton = document.querySelector(\".profile__edit-button\");\n//Форма редактирования профиля\nconst formProfile = document.forms[\"edit-profile\"];\n//Поле \"Имя\" формы редактирования профиля\nconst nameInput = formProfile.elements.name;\n//Поле \"Должность\" формы редактирования профиля\nconst jobInput = formProfile.elements.description;\n//Кликабельная аватарка\nconst avatarButton = document.querySelector(\".profile__image\");\n//Модальное окно редактирования аватара\nconst modalAvatarEdit = document.querySelector(\".popup_type_avatar\");\n//Форма редактирования аватара\nconst formAvatar = document.forms[\"avatar-edit\"];\n//Поле \"Адрес картинки\" формы редактирования аватара\nconst avatarUrlInput = formAvatar.elements.avatarlink;\n//Иконка закрытия модального окна редактирования аватара\nconst closeModalAvatarEdit = modalAvatarEdit.querySelector(\".popup__close\");\n//Форма добавления нового места\nconst formNewPlace = document.forms[\"new-place\"];\n//Поле \"Место\" формы добавления нового места\nconst namePlaceInput = formNewPlace.elements[\"place-name\"];\n//Поле \"Адрес картинки\" формы добавления нового места\nconst imgUrlInput = formNewPlace.elements.link;\n//Модальное окно большой картинки\nconst modalImg = document.querySelector(\".popup_type_image\");\n//Адрес картинки для модального окна большой картинки\nconst modalImgUrl = modalImg.querySelector(\".popup__image\");\n//Подпись под картинкой модального окна большой картинки\nconst modalImgTitle = modalImg.querySelector(\".popup__caption\");\n//Иконка закрытия большой картинки\nconst closeModalImg = modalImg.querySelector(\".popup__close\");\n//Иконка закрытия модального окна профиля\nconst closeModalProfile = modalProfile.querySelector(\".popup__close\");\n//Иконка закрытия модального окна добавления нового места\nconst closeModalAddNewPlace = modalAddNewPlace.querySelector(\".popup__close\");\n\n//Запрашиваем с сервера данные профиля и список карточек\nPromise.all([getProfileData(), getInitialCards()])\n  .then(([profileData, initialCards]) => {\n    //заполняем профиль данными с сервера\n    document.querySelector(\".profile__title\").textContent = profileData.name;\n    document.querySelector(\".profile__description\").textContent =\n      profileData.about;\n    document.querySelector(\".profile__image\").style[\n      \"background-image\"\n    ] = `url(${profileData.avatar})`;\n    //Выводим карточки мест\n    initialCards.forEach(function (item) {\n      listOfCards.append(\n        createNewCard(\n          item,\n          removeCard,\n          openBigImgModal,\n          likeCard,\n          profileData,\n          deleteCardFromServer\n        )\n      );\n    });\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n\n//Обработчик открытия модального окна профиля\nprofileEditButton.addEventListener(\"click\", function () {\n  //Вставляем в поля модального окна профиля текущее значение из шаблона\n  nameInput.value = document.querySelector(\".profile__title\").textContent;\n  jobInput.value = document.querySelector(\".profile__description\").textContent;\n  //Очистка валидации\n  clearValidation(formProfile, validationConfig);\n  //Открываем модальное окно профиля\n  openModal(modalProfile);\n});\n\n//Функция редактирования профиля\nfunction submitFormProfile(evt) {\n  //Скидываем дефолтное поведение для сабмита\n  evt.preventDefault();\n  //Присваиваем HTML-блоку с информацией о профиле данные из формы\n  document.querySelector(\".profile__title\").textContent = nameInput.value;\n  document.querySelector(\".profile__description\").textContent = jobInput.value;\n  //Формируем массив для передачи функции обновления профиля\n  const newProfileData = {\n    name: nameInput.value,\n    about: jobInput.value,\n  };\n  //Показываем загрузку\n  const submitButton = evt.submitter;\n  showLoading(true, submitButton);\n  //Обновляем данные на сервере\n  updateProfile(newProfileData).finally(() => {\n    showLoading(false, submitButton);\n  });\n  //Закрываем окно\n  closeModal(modalProfile);\n}\n\n// Обработчик самбита для редакитрования профиля\nformProfile.addEventListener(\"submit\", submitFormProfile);\n\n// Обработчик открытия модального окна редактирования аватара\navatarButton.addEventListener(\"click\", function () {\n  //Вставляем в поле текущую ссылку на аватарку\n  avatarUrlInput.value = document\n    .querySelector(\".profile__image\")\n    .style[\"background-image\"].slice(5, -2);\n  //Очистка валидации\n  clearValidation(formAvatar, validationConfig);\n  //Открываем модальное окно\n  openModal(modalAvatarEdit);\n});\n\n//Функция обновления автара\nfunction submitNewAvatar(evt) {\n  //Скидываем дефолтное поведение для сабмита\n  evt.preventDefault();\n  //Добавляем аватарку в шаблон значеним из формы\n  document.querySelector(\".profile__image\").style[\n    \"background-image\"\n  ] = `url(${avatarUrlInput.value})`;\n  //Присваиваем переменной  адрес новой аватарки и передаем в функцию\n  const newAvatarImg = { avatar: avatarUrlInput.value };\n  //Показываем загрузку\n  const submitButton = evt.submitter;\n  showLoading(true, submitButton);\n  //Обновляем картинку аватарки на сервере\n  updateAvatar(newAvatarImg).finally(() => {\n    showLoading(false, submitButton);\n  });\n  //Закрываем окно\n  closeModal(modalAvatarEdit);\n}\n\n//Обработчик самбита обновления аватарки\nformAvatar.addEventListener(\"submit\", submitNewAvatar);\n\n//Обработчик открытия модального окна добавления нового места\nmodalAddNewPlaceButton.addEventListener(\"click\", function () {\n  //Очистка валидации\n  clearValidation(formNewPlace, validationConfig);\n  //Открываем модальное окно\n  openModal(modalAddNewPlace);\n});\n\n// Обработчик формы добавления нового места\nformNewPlace.addEventListener(\"submit\", function (evt) {\n  //Скидываем дефолтное поведение для сабмита\n  evt.preventDefault();\n  //Формируем массив для перадачи в функцию добавления createNewCard\n  const newCard = {\n    name: namePlaceInput.value,\n    link: imgUrlInput.value,\n  };\n  //Показываем загрузку\n  const submitButton = evt.submitter;\n  showLoading(true, submitButton);\n  //Отправляем данные новой карточки на сервер\n  addNewPlaceToServer(newCard)\n    .then((res) => {\n      listOfCards.prepend(\n        createNewCard(\n          res,\n          removeCard,\n          openBigImgModal,\n          likeCard,\n          res.owner,\n          deleteCardFromServer\n        )\n      );\n    })\n    .finally(() => {\n      showLoading(false, submitButton);\n    });\n  //Очищаем форму после сохранения полей\n  formNewPlace.reset();\n  // закрываем модальное окно после сохранения\n  closeModal(modalAddNewPlace);\n});\n\n//Функция заполнения полей большой картинки данными из функции создания карточки\nfunction openBigImgModal(item) {\n  // Заполняем переменные данными\n  modalImgUrl.src = item.link;\n  modalImgUrl.alt = item.name;\n  modalImgTitle.textContent = item.name;\n  //Открываем модальное окно с большой картинкой\n  openModal(modalImg);\n}\n\n//Обработчик закрытия большой картинки нажатием на крестик\ncloseModalImg.addEventListener(\"click\", function () {\n  //Закрыавем окно\n  closeModal(modalImg);\n});\n\n//Обработчик закрытия модального окно профиля нажатием на крестик\ncloseModalProfile.addEventListener(\"click\", function () {\n  //Закрыавем окно\n  closeModal(modalProfile);\n});\n\n//Обработчик закрытия окна редактирования аватара нажатием на крестик\ncloseModalAvatarEdit.addEventListener(\"click\", function () {\n  //Закрыавем окно\n  closeModal(modalAvatarEdit);\n});\n\n//Обработчик закрытия модального окна добавления нового места нажатием на крестик\ncloseModalAddNewPlace.addEventListener(\"click\", function () {\n  //Закрыавем окно\n  closeModal(modalAddNewPlace);\n});\n\n//Обработчик закрытия модального окна добавления нового места по клику на оверлей\nmodalAddNewPlace.addEventListener(\"click\", closePopupByOverlay);\n\n//Обработчик закрытия модального окна профиля по клику на оверлей\nmodalProfile.addEventListener(\"click\", closePopupByOverlay);\n\n//Обработчик закрытия модального окна большой картинки по клику на оверлей\nmodalImg.addEventListener(\"click\", closePopupByOverlay);\n\n//Обработчик закрытия модального окна редактирования аватара по клику на оверлей\nmodalAvatarEdit.addEventListener(\"click\", closePopupByOverlay);\n\n//Активируем функции валидации полей форм\nenableValidation(validationConfig);\n\n//Функция отображения статуса сохранения на кнопках\nfunction showLoading(isLoading, submitButton) {\n  if (isLoading) {\n    submitButton.textContent = \"Сохранение...\";\n  } else {\n    submitButton.textContent = \"Сохранить\";\n  }\n}\n"],"names":["config","baseUrl","headers","authorization","handleResponse","res","ok","json","Promise","reject","concat","status","deleteCardFromServer","itemId","fetch","method","then","cardTemplate","document","querySelector","content","createNewCard","item","removeCard","openBigImgModal","likeCard","profileData","cardItem","cloneNode","removeButton","likeButton","cardImageUrl","cardTitle","src","link","alt","name","textContent","addEventListener","evt","_id","likes","length","some","like","classList","toggle","owner","style","target","closest","remove","contains","putLike","add","validationConfig","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","toggleButtonState","inputList","buttonElement","inputElement","validity","valid","hasInvalidInput","disabled","hideInputError","formProfile","errorElement","id","clearValidation","Array","from","querySelectorAll","forEach","input","submitButton","openModal","closePopupByEsc","closeModal","removeEventListener","key","closePopupByOverlay","currentTarget","listOfCards","modalAddNewPlace","modalAddNewPlaceButton","modalProfile","profileEditButton","forms","nameInput","elements","jobInput","description","avatarButton","modalAvatarEdit","formAvatar","avatarUrlInput","avatarlink","closeModalAvatarEdit","formNewPlace","namePlaceInput","imgUrlInput","modalImg","modalImgUrl","modalImgTitle","closeModalImg","closeModalProfile","closeModalAddNewPlace","showLoading","isLoading","all","_ref","_ref2","initialCards","about","avatar","append","catch","err","console","log","value","preventDefault","newProfileData","submitter","body","JSON","stringify","updateProfile","finally","slice","newAvatarImg","updateAvatar","newCard","addNewPlaceToServer","prepend","reset","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners"],"sourceRoot":""}