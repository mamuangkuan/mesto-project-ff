{"version":3,"file":"main.js","mappings":"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","sources":["webpack://yandex-praktikum/./src/components/api.js","webpack://yandex-praktikum/./src/components/card.js","webpack://yandex-praktikum/./src/components/validation.js","webpack://yandex-praktikum/./src/components/modal.js","webpack://yandex-praktikum/./src/index.js"],"sourcesContent":["//Конфиг для подключения и авторизации на сервере\nconst config = {\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-18\",\n  headers: {\n    authorization: \"9fe7d77e-0e55-443e-a94d-5fc31f24e03d\",\n    \"Content-Type\": \"application/json\",\n  },\n};\n//Преобразование промиса в JSON-массив\nconst handleResponse = (res) => {\n  if (res.ok) {\n    return res.json();\n  }\n  // если ошибка, отклоняем промис\n  return Promise.reject(`Ошибка: ${res.status}`);\n};\n\n//Получение списка карточек с сервера\nexport const getInitialCards = () => {\n  return fetch(`${config.baseUrl}/cards`, {\n    method: \"GET\",\n    headers: config.headers,\n  }).then(handleResponse);\n};\n\n//Получение данных профиля с сервера\nexport const getProfileData = () => {\n  return fetch(`${config.baseUrl}/users/me`, {\n    method: \"GET\",\n    headers: config.headers,\n  }).then(handleResponse);\n};\n\n//Обновление данных профиля на сервере\nexport const updateProfile = (newProfileData) => {\n  return fetch(`${config.baseUrl}/users/me`, {\n    method: \"PATCH\",\n    headers: config.headers,\n    body: JSON.stringify(newProfileData),\n  })\n    .then(handleResponse) \n};\n\n//Обновление картинки аватарки на сервере\nexport const updateAvatar = (newAvatarImg) => {\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\n    method: \"PATCH\",\n    headers: config.headers,\n    body: JSON.stringify(newAvatarImg),\n  }).then(handleResponse);\n};\n\n//Добавление новой карточки на сервер\nexport const addNewPlaceToServer = (newCard) => {\n  return fetch(`${config.baseUrl}/cards`, {\n    method: \"POST\",\n    headers: config.headers,\n    body: JSON.stringify(newCard),\n  }).then(handleResponse);\n};\n\n//Удаление карточки с сервера\nexport const deleteCardFromServer = (itemId) => {\n  return fetch(`${config.baseUrl}/cards/${itemId}`, {\n    method: \"DELETE\",\n    headers: config.headers,\n  }).then(handleResponse);\n};\n\n//Устанока лайка\nexport const putLike = (itemId) => {\n  return fetch(`${config.baseUrl}/cards/likes/${itemId}`, {\n    method: \"PUT\",\n    headers: config.headers,\n  }).then(handleResponse);\n};\n\n//Снятие лайка\nexport const removeLike = (itemId) => {\n  return fetch(`${config.baseUrl}/cards/likes/${itemId}`, {\n    method: \"DELETE\",\n    headers: config.headers,\n  }).then(handleResponse);\n};\n","import { deleteCardFromServer, putLike, removeLike } from \"./api.js\";\n\n//Темплейт карточки\nconst cardTemplate = document.querySelector(\"#card-template\").content;\n\n// Функция создания карточки\nexport function createNewCard(\n  item,\n  removeCard,\n  openBigImgModal,\n  likeCard,\n  profileData,\n  deleteCardFromServer\n) {\n  //Клонирование экземпляра карточки\n  const cardItem = cardTemplate.querySelector(\".places__item\").cloneNode(true);\n  //Кнопка удаления карточки\n  const removeButton = cardItem.querySelector(\".card__delete-button\");\n  //Кнопка лайка\n  const likeButton = cardItem.querySelector(\".card__like-button\");\n  //Блок с картинкой\n  const cardImageUrl = cardItem.querySelector(\".card__image\");\n  //Заголовок картинки\n  const cardTitle = cardItem.querySelector(\".card__title\");\n  //Заполняем переменные данными\n  cardImageUrl.src = item.link;\n  cardTitle.alt = item.name;\n  cardTitle.textContent = item.name;\n  //Обработчик открытия большой картинки\n  cardImageUrl.addEventListener(\"click\", function () {\n    openBigImgModal(item);\n  });\n  //Обработчик кнопки удаления карточки\n  removeButton.addEventListener(\"click\", function (evt) {\n    //Удаяем карточку с сервера\n    deleteCardFromServer(item._id)\n      .then(() => {\n        //Удаляем карточку из DOM-дерева\n        removeCard(evt);\n      })\n      .catch((error) => {\n        console.log(`${error} ответил нам сервер и отказался что-либо делать`);\n      });\n  });\n  //Обработчик кнопки лайка\n  likeButton.addEventListener(\"click\", function (evt) {\n    likeCard(evt, item, cardItem);\n  });\n\n  //Выделяем лайкнутые карточки\n  if (item.likes.some((like) => like._id === profileData._id)) {\n    likeButton.classList.toggle(\"card__like-button_is-active\");\n  }\n  //Счетчик лайков\n  cardItem.querySelector(\".like__counter\").textContent = item.likes.length;\n\n  //Скрытие корзины для чужих карточек\n  if (!(profileData._id === item.owner._id)) {\n    removeButton.style = [\"display:none\"];\n  }\n  //Возврат готового результата\n  return cardItem;\n}\n\n//Функция удаления карточки\nexport function removeCard(evt) {\n  evt.target.closest(\".places__item\").remove();\n}\n\n//Функция лайка карточки\nexport function likeCard(evt, item, cardItem) {\n  if (evt.target.classList.contains(\"card__like-button_is-active\")) {\n    removeLike(item._id)\n      .then((res) => {\n        evt.target.classList.remove(\"card__like-button_is-active\");\n        cardItem.querySelector(\".like__counter\").textContent = res.likes.length;\n      })\n      .catch((error) => {\n        console.log(`${error} ответил нам сервер и отказался что-либо делать`);\n      });\n  } else {\n    putLike(item._id)\n      .then((res) => {\n        evt.target.classList.add(\"card__like-button_is-active\");\n        cardItem.querySelector(\".like__counter\").textContent = res.likes.length;\n      })\n      .catch((error) => {\n        console.log(`${error} ответил нам сервер и отказался что-либо делать`);\n      });\n  }\n}\n","//Конфиг валидации\nexport const validationConfig = {\n  formSelector: \".popup__form\",\n  inputSelector: \".popup__input\",\n  submitButtonSelector: \".popup__button\",\n  inactiveButtonClass: \"popup__button_disabled\",\n  inputErrorClass: \"popup__input_type_error\",\n  errorClass: \"popup__error_visible\",\n};\n\n//Функция, которая добавляет класс с ошибкой\nconst showInputError = (\n  formProfile,\n  inputElement,\n  errorMessage,\n  validationConfig\n) => {\n  const errorElement = formProfile.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.add(validationConfig.errorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(validationConfig.inputErrorClass);\n};\n\n// Удаление класса с ошибкой\nconst hideInputError = (formProfile, inputElement, validationConfig) => {\n  const errorElement = formProfile.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.remove(validationConfig.errorClass);\n  errorElement.classList.remove(validationConfig.inputErrorClass);\n  errorElement.textContent = \"\";\n};\n\n//Проверка валидности поля\nconst isValid = (formProfile, inputElement, validationConfig) => {\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    inputElement.setCustomValidity(\"\");\n  }\n  if (!inputElement.validity.valid) {\n    showInputError(\n      formProfile,\n      inputElement,\n      inputElement.validationMessage,\n      validationConfig\n    );\n  } else {\n    hideInputError(formProfile, inputElement, validationConfig);\n  }\n};\n\n// Функция валидации полей\nexport const enableValidation = (validationConfig) => {\n  const formList = Array.from(\n    document.querySelectorAll(validationConfig.formSelector)\n  );\n  formList.forEach((formProfile) => {\n    setEventListeners(formProfile, validationConfig);\n  });\n};\n\n//Назначение листнера всем полям\nconst setEventListeners = (formProfile, validationConfig) => {\n  const inputList = Array.from(\n    formProfile.querySelectorAll(validationConfig.inputSelector)\n  );\n  const buttonElement = formProfile.querySelector(\n    validationConfig.submitButtonSelector\n  );\n  toggleButtonState(inputList, buttonElement, validationConfig);\n  inputList.forEach((inputElement) => {\n    inputElement.addEventListener(\"input\", () => {\n      isValid(formProfile, inputElement, validationConfig);\n      toggleButtonState(inputList, buttonElement, validationConfig);\n    });\n  });\n};\n\n//Провка наличия невалидного поля\nconst hasInvalidInput = (inputList) => {\n  return inputList.some((inputElement) => {\n    return !inputElement.validity.valid;\n  });\n};\n\n//Функция проверяет статус кнопки - активаня или неактивная, если есть хоть 1 невалидные инпут\nconst toggleButtonState = (inputList, buttonElement, validationConfig) => {\n  if (hasInvalidInput(inputList)) {\n    buttonElement.disabled = true;\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\n  } else {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\n  }\n};\n\n// Функция удаляет все ошибки валидации и делает кнопку неактивной без валидных данных\nexport const clearValidation = (formProfile, validationConfig) => {\n  const formsInput = Array.from(\n    formProfile.querySelectorAll(validationConfig.inputSelector)\n  );\n  formsInput.forEach((input) => {\n    hideInputError(formProfile, input, validationConfig);\n  });\n  const submitButton = formProfile.querySelector(\n    validationConfig.submitButtonSelector\n  );\n  submitButton.disabled = true;\n  submitButton.classList.add(validationConfig.inactiveButtonClass);\n};\n","// Функция открытия модального окна\nexport function openModal(item) {\n  item.classList.add(\"popup_is-opened\");\n  document.addEventListener(\"keydown\", closePopupByEsc);\n}\n\n// Функция закрытия модального окна\nexport function closeModal(item) {\n  item.classList.remove(\"popup_is-opened\");\n  document.removeEventListener(\"keydown\", closePopupByEsc);\n}\n\n// Функция закрытия модальных окон нажатием клавиши ESC\nfunction closePopupByEsc(evt) {\n  if (evt.key === \"Escape\") {\n    closeModal(document.querySelector(\".popup_is-opened\"));\n  }\n}\n\n// Функция закрытия модальных окон кликом по оверлею\nexport function closePopupByOverlay(evt) {\n  if (evt.target === evt.currentTarget) {\n    closeModal(evt.currentTarget);\n  }\n}","// Подключение файла стилей\nimport \"./pages/index.css\";\n// Подключений функций создания, удаления и лайка карточки\nimport { createNewCard, removeCard, likeCard } from \"./components/card.js\";\n//Подключаем апи\nimport {\n  getInitialCards,\n  getProfileData,\n  updateProfile,\n  updateAvatar,\n  addNewPlaceToServer,\n  deleteCardFromServer,\n} from \"./components/api.js\";\n// Подключений функций создания, удаления и лайка карточки\nimport {\n  enableValidation,\n  clearValidation,\n  validationConfig\n} from \"./components/validation.js\";\n// Подключений функций открытия и закрытия попапов\nimport {\n  openModal,\n  closeModal,\n  closePopupByOverlay,\n} from \"./components/modal.js\";\n\n//СПИСОК ПЕРЕМЕННЫХ И КОНСТАНТ\n//Список карточек\nconst listOfCards = document.querySelector(\".places__list\");\n//Модальное окно добавления нового места\nconst modalAddNewPlace = document.querySelector(\".popup_type_new-card\");\n//Кнопка добавления нового места\nconst modalAddNewPlaceButton = document.querySelector(\".profile__add-button\");\n//Модальное окно редактирования профиля\nconst modalProfile = document.querySelector(\".popup_type_edit\");\n//Кнопка редактирования профиля\nconst profileEditButton = document.querySelector(\".profile__edit-button\");\n//Форма редактирования профиля\nconst formProfile = document.forms[\"edit-profile\"];\n//Поле \"Имя\" формы редактирования профиля\nconst nameInput = formProfile.elements.name;\n//Поле \"Должность\" формы редактирования профиля\nconst jobInput = formProfile.elements.description;\n//Кликабельная аватарка\nconst avatarButton = document.querySelector(\".profile__image\");\n//Модальное окно редактирования аватара\nconst modalAvatarEdit = document.querySelector(\".popup_type_avatar\");\n//Форма редактирования аватара\nconst formAvatar = document.forms[\"avatar-edit\"];\n//Поле \"Адрес картинки\" формы редактирования аватара\nconst avatarUrlInput = formAvatar.elements.avatarlink;\n//Форма добавления нового места\nconst formNewPlace = document.forms[\"new-place\"];\n//Поле \"Место\" формы добавления нового места\nconst namePlaceInput = formNewPlace.elements[\"place-name\"];\n//Поле \"Адрес картинки\" формы добавления нового места\nconst imgUrlInput = formNewPlace.elements.link;\n//Модальное окно большой картинки\nconst modalImg = document.querySelector(\".popup_type_image\");\n//Адрес картинки для модального окна большой картинки\nconst modalImgUrl = modalImg.querySelector(\".popup__image\");\n//Подпись под картинкой модального окна большой картинки\nconst modalImgTitle = modalImg.querySelector(\".popup__caption\");\n//Имя профиля\nconst profileName = document.querySelector(\".profile__title\");\n//Описание или \"должность\" профиля\nconst profileDescription = document.querySelector(\".profile__description\");\n//Все попапы на странице\nconst allModals = document.querySelectorAll(\".popup\");\n\n//Запрашиваем с сервера данные профиля и список карточек\nPromise.all([getProfileData(), getInitialCards()])\n  .then(([profileData, initialCards]) => {\n    //заполняем профиль данными с сервера\n    profileName.textContent = profileData.name;\n    profileDescription.textContent = profileData.about;\n    document.querySelector(\".profile__image\").style[\n      \"background-image\"\n    ] = `url(${profileData.avatar})`;\n    //Выводим карточки мест\n    initialCards.forEach(function (item) {\n      listOfCards.append(\n        createNewCard(\n          item,\n          removeCard,\n          openBigImgModal,\n          likeCard,\n          profileData,\n          deleteCardFromServer\n        )\n      );\n    });\n  })\n  .catch((error) => {\n    console.log(`${error} ответил нам сервер и отказался что-либо делать`);\n  });\n\n//Обработчик открытия модального окна профиля\nprofileEditButton.addEventListener(\"click\", function () {\n  //Вставляем в поля модального окна профиля текущее значение из шаблона\n  nameInput.value = profileName.textContent;\n  jobInput.value = profileDescription.textContent;\n  //Очистка валидации\n  clearValidation(formProfile, validationConfig);\n  //Открываем модальное окно профиля\n  openModal(modalProfile);\n});\n\n//Функция редактирования профиля\nfunction submitFormProfile(evt) {\n  //Скидываем дефолтное поведение для сабмита\n  evt.preventDefault();\n  //Формируем массив для передачи функции обновления профиля\n  const newProfileData = {\n    name: nameInput.value,\n    about: jobInput.value,\n  };\n  //Показываем загрузку\n  const submitButton = evt.submitter;\n  showLoading(true, submitButton);\n  //Обновляем данные на сервере\n  updateProfile(newProfileData)\n    .then(() => {\n      //Присваиваем HTML-блоку с информацией о профиле данные из формы\n      profileName.textContent = nameInput.value;\n      profileDescription.textContent = jobInput.value;\n      //Закрываем окно\n      closeModal(modalProfile);\n    })\n    .catch((error) => {\n      console.log(`${error} ответил нам сервер и отказался что-либо делать`);\n    })\n    .finally(() => {\n      showLoading(false, submitButton);\n    });\n}\n\n// Обработчик самбита для редакитрования профиля\nformProfile.addEventListener(\"submit\", submitFormProfile);\n\n// Обработчик открытия модального окна редактирования аватара\navatarButton.addEventListener(\"click\", function () {\n  //Очистка валидации\n  clearValidation(formAvatar, validationConfig);\n  //Открываем модальное окно\n  openModal(modalAvatarEdit);\n});\n\n//Функция обновления автара\nfunction submitNewAvatar(evt) {\n  //Скидываем дефолтное поведение для сабмита\n  evt.preventDefault();\n  //Присваиваем переменной  адрес новой аватарки и передаем в функцию\n  const newAvatarImg = { avatar: avatarUrlInput.value };\n  //Показываем загрузку\n  const submitButton = evt.submitter;\n  showLoading(true, submitButton);\n  //Обновляем картинку аватарки на сервере\n  updateAvatar(newAvatarImg)\n    .then(() => {\n      //Добавляем аватарку в шаблон значеним из формы\n      avatarButton.style[\"background-image\"] = `url(${avatarUrlInput.value})`;\n      //Закрываем окно\n      closeModal(modalAvatarEdit);\n    })\n    .catch((error) => {\n      console.log(`${error} ответил нам сервер и отказался что-либо делать`);\n    })\n    .finally(() => {\n      showLoading(false, submitButton);\n    });\n}\n\n//Обработчик самбита обновления аватарки\nformAvatar.addEventListener(\"submit\", submitNewAvatar);\n\n//Обработчик открытия модального окна добавления нового места\nmodalAddNewPlaceButton.addEventListener(\"click\", function () {\n  //Очистка валидации\n  clearValidation(formNewPlace, validationConfig);\n  //Открываем модальное окно\n  openModal(modalAddNewPlace);\n});\n\n// Обработчик формы добавления нового места\nformNewPlace.addEventListener(\"submit\", function (evt) {\n  //Скидываем дефолтное поведение для сабмита\n  evt.preventDefault();\n  //Формируем массив для перадачи в функцию добавления createNewCard\n  const newCard = {\n    name: namePlaceInput.value,\n    link: imgUrlInput.value,\n  };\n  //Показываем загрузку\n  const submitButton = evt.submitter;\n  showLoading(true, submitButton);\n  //Отправляем данные новой карточки на сервер\n  addNewPlaceToServer(newCard)\n    .then((res) => {\n      listOfCards.prepend(\n        createNewCard(\n          res,\n          removeCard,\n          openBigImgModal,\n          likeCard,\n          res.owner,\n          deleteCardFromServer\n        )\n      );\n      //Очищаем форму после сохранения полей\n      formNewPlace.reset();\n      // закрываем модальное окно после сохранения\n      closeModal(modalAddNewPlace);\n    })\n    .catch((error) => {\n      console.log(`${error} ответил нам сервер и отказался что-либо делать`);\n    })\n    .finally(() => {\n      showLoading(false, submitButton);\n    });\n});\n\n//Функция заполнения полей большой картинки данными из функции создания карточки\nfunction openBigImgModal(item) {\n  // Заполняем переменные данными\n  modalImgUrl.src = item.link;\n  modalImgUrl.alt = item.name;\n  modalImgTitle.textContent = item.name;\n  //Открываем модальное окно с большой картинкой\n  openModal(modalImg);\n}\n\n//Закрытие всех попаов кликом на крестик\nallModals.forEach((modalWindow) => {\n  modalWindow.addEventListener(\"mousedown\", (evt) => {\n    if (evt.target.classList.contains(\"popup_is-opened\")) {\n      closeModal(modalWindow);\n    }\n    if (evt.target.classList.contains(\"popup__close\")) {\n      closeModal(modalWindow);\n    }\n  });\n});\n\n//Обработчик закрытия модального окна добавления нового места по клику на оверлей\nmodalAddNewPlace.addEventListener(\"click\", closePopupByOverlay);\n\n//Обработчик закрытия модального окна профиля по клику на оверлей\nmodalProfile.addEventListener(\"click\", closePopupByOverlay);\n\n//Обработчик закрытия модального окна большой картинки по клику на оверлей\nmodalImg.addEventListener(\"click\", closePopupByOverlay);\n\n//Обработчик закрытия модального окна редактирования аватара по клику на оверлей\nmodalAvatarEdit.addEventListener(\"click\", closePopupByOverlay);\n\n//Активируем функции валидации полей форм\nenableValidation(validationConfig);\n\n//Функция отображения статуса сохранения на кнопках\nfunction showLoading(isLoading, submitButton) {\n  if (isLoading === true) {\n    submitButton.textContent = \"Сохранение...\";\n  } else {\n    submitButton.textContent = \"Сохранить\";\n  }\n}\n"],"names":["config","baseUrl","headers","authorization","handleResponse","res","ok","json","Promise","reject","concat","status","deleteCardFromServer","itemId","fetch","method","then","cardTemplate","document","querySelector","content","createNewCard","item","removeCard","openBigImgModal","likeCard","profileData","cardItem","cloneNode","removeButton","likeButton","cardImageUrl","cardTitle","src","link","alt","name","textContent","addEventListener","evt","_id","catch","error","console","log","likes","some","like","classList","toggle","length","owner","style","target","closest","remove","contains","putLike","add","validationConfig","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","hideInputError","formProfile","inputElement","errorElement","id","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","disabled","clearValidation","Array","from","querySelectorAll","forEach","input","submitButton","openModal","closePopupByEsc","closeModal","removeEventListener","key","closePopupByOverlay","currentTarget","listOfCards","modalAddNewPlace","modalAddNewPlaceButton","modalProfile","profileEditButton","forms","nameInput","elements","jobInput","description","avatarButton","modalAvatarEdit","formAvatar","avatarUrlInput","avatarlink","formNewPlace","namePlaceInput","imgUrlInput","modalImg","modalImgUrl","modalImgTitle","profileName","profileDescription","allModals","showLoading","isLoading","all","_ref","_ref2","initialCards","about","avatar","append","value","preventDefault","newProfileData","submitter","body","JSON","stringify","updateProfile","finally","newAvatarImg","updateAvatar","newCard","addNewPlaceToServer","prepend","reset","modalWindow","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners","enableValidation"],"sourceRoot":""}